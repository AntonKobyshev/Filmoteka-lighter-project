{"mappings":"iiBAAA,I,EAAAA,EAAAC,EAAA,S,8ECEe,SAAAC,EAAyBC,GACtC,OAAOA,EACJC,KACC,SAAAC,G,IAWMC,EAVJC,EAAWF,EAAXE,YACAC,EAAKH,EAALG,MACAC,EAAIJ,EAAJK,KACAC,EAAYN,EAAZM,aACAC,EAAcP,EAAdO,eACAC,EAASR,EAATQ,UACAC,EAAMT,EAANS,OACAC,EAAYV,EAAZU,aACAC,EAAEX,EAAFY,GAaA,OAVIH,IACFR,EAAaQ,EAAOV,KAAI,SAAAc,G,OAAOA,EAAJR,I,IAAiBS,KAAK,OAE/CN,IACFP,EAAac,EAAAC,GACVC,QAAO,SAAAJ,G,IAAGD,EAAEC,EAAFD,G,OAASJ,EAAUU,SAASN,E,IACtCb,KAAI,SAAAc,G,OAAOA,EAAJR,I,IACPS,KAAK,OAGH,mCAEkEK,OAF/BR,EAAG,wGAG3CQ,OADuEjB,EAAY,UAIjDiB,OAHlChB,GAASC,EACV,qHAG8Ce,OADXhB,GAASC,EAAK,+DAC2Be,OAA9BlB,GAAc,SAAS,SAIZkB,QAJoBb,GAAgBC,GAAkB,QAAQa,MAC1G,EACA,GACA,0EACgED,OAApBT,GAAgB,IAAI,+E,IAMjFI,KAAK,G,CC5CVE,EAAiBK,KAAKC,MAAM,4hBCE5B,IAAMC,EAAeC,SAASC,cAAc,4BAE7B,SAAAC,EAA2B5B,GACxCyB,EAAaI,UAAY9B,EAAgBC,E,oEHO3C,IAAM8B,GAAM,EAAAC,EAAAC,eAAcC,EAAAC,gBACpBC,GAAK,EAAAC,EAAAC,aAAYP,GACjBQ,GAAO,EAAAC,EAAAC,SAAQV,GAMrB,IAAI,EAAAW,EAAAC,SAJa,CACfC,MAAO,GACPC,QAAS,KAGX,IAAMC,EAAW,IAAI,EAAAC,EAAAC,aAEfC,EAAUtB,SAASC,cAAc,SACjCsB,EAAgBvB,SAASC,cAAc,eACvCuB,EAAcxB,SAASC,cAAc,aACrCwB,EAAYzB,SAASC,cAAc,4BACnCyB,EAAe1B,SAASC,cAAc,iBAQrC,SAAS0B,IACd,IAAIJ,EAAcK,UAAUC,SAAS,WAArC,CACA,IAAIC,EAAiBC,EAAAC,WAAkB,SAEvC,EAAAnB,EAAAoB,oBAAmBrB,GAAM,SAAAsB,GACvB,GAAIA,EAAM,CACR,IAAMC,EAAc,SAAkBxC,OAATuC,EAAKE,IAAI,kBAEtC,EAAA1B,EAAA2B,MAAI,EAAA3B,EAAA4B,KAAI7B,EAAI0B,IACTI,MAAK,SAAAC,GACJ,GAAIA,EAASC,SAAU,CACrB,IAAMC,EAAMC,OAAOC,KAAKJ,EAASK,OAIjCC,aAAaC,QAAQ,YAAa,WAClCD,aAAaC,QAAQ,aAAcC,KAAKC,KAAKP,EAAIQ,OAAS,KAC1D,IAAMC,EAAaL,aAAaM,QAAQ,eACxC,EAAAC,EAAAC,kBAAiBH,GAGjBL,aAAaC,QAAQ,UAAWlD,KAAK0D,UAAUf,EAASK,QAEnDnB,EAAaE,UAAUC,SAAS,oBACnCH,EAAaE,UAAU4B,IAAI,mBAG7BC,EAAkBf,EAAKI,aAAaM,QAAQ,e,MAGxC1B,EAAaE,UAAUC,SAAS,oBAClCH,EAAaE,UAAU8B,OAAO,mBAEhCjC,EAAUtB,UAAY,GACtBwD,QAAQC,IAAI,oB,IAGfC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,E,QAItB/B,EAAAgC,aAAoBjC,GACpBP,EAAcK,UAAU4B,IAAI,aAC5BhC,EAAYI,UAAU8B,OAAO,YA3CoB,C,YA8FHhB,G,OAAlBsB,EAAiBC,MAAAC,KAAAC,U,UAAjBH,I,OAAAA,EAAfzE,EAAApB,EAAA,CAAAoB,EAAA6E,GAAAC,MAAA,SAAAC,EAAiC5B,G,IAAK6B,EAE7CzC,EAQE0C,EACAC,EACAC,EACAC,EAIKC,EAAAT,U,yEAjBsCI,EAAAK,EAAA1B,OAAA,YAAA0B,EAAA,GAAQA,EAAA,GAAD,E,SAEpD9C,EAAiBC,EAAAC,WAAkB,QAEvC2B,QAAQC,IAAI,cAMNY,EAA0B,IAAZD,EAAO,GACrBE,EAAkB,GAAPF,EACXG,EAAchC,EAAI9C,MAAM4E,EAAYC,GACpCE,EAAUD,EAAYnG,IAAG,W,MAACgB,EAAApB,EAAA,CAAAoB,EAAA6E,GAAAC,MAAA,SAAAQ,EAAMzF,G,yEACpC+B,EAAS/B,GAAKA,E,SACD+B,EAAS2D,iB,mGAFc1F,G,gCAAP,I,UAIX2F,QAAQC,IAAIL,G,QAChCzE,EADW+E,EAAAC,MAEXvB,QAAQC,IAAI,eACZ7B,EAAAgC,aAAoBjC,G,kDAEpB6B,QAAQC,IAAGqB,EAAAE,I,0DAtBenB,EAAiBC,MAAAC,KAAAC,U,CArG/C3C,EAAY4D,iBAAiB,SAqDtB,WACL,GAAI5D,EAAYI,UAAUC,SAAS,aAAc,OACjDL,EAAYI,UAAU4B,IAAI,aAC1BjC,EAAcK,UAAU8B,OAAO,aAE/B,IAAI5B,EAAiBC,EAAAC,WAAkB,SAEvC,EAAAnB,EAAAoB,oBAAmBrB,GAAM,SAAAsB,GACvB,GAAIA,EAAM,CACR,IAAMC,EAAc,SAAkBxC,OAATuC,EAAKE,IAAI,gBAEtC,EAAA1B,EAAA2B,MAAI,EAAA3B,EAAA4B,KAAI7B,EAAI0B,IACTI,MAAK,SAAAC,GACJ,GAAIA,EAASC,SAAU,CACrB,IAAMC,EAAMC,OAAOC,KAAKJ,EAASK,OAGjCC,aAAaC,QAAQ,YAAa,SAClCD,aAAaC,QAAQ,aAAcC,KAAKC,KAAKP,EAAIQ,OAAS,KAC1D,IAAMC,EAAaL,aAAaM,QAAQ,eACxC,EAAAC,EAAAC,kBAAiBH,GAGjBL,aAAaC,QAAQ,SAAUlD,KAAK0D,UAAUf,EAASK,QAElDnB,EAAaE,UAAUC,SAAS,oBACnCH,EAAaE,UAAU4B,IAAI,mBAE7BC,EAAkBf,E,MAIdhB,EAAaE,UAAUC,SAAS,oBAClCH,EAAaE,UAAU8B,OAAO,mBAEhCjC,EAAUtB,UAAY,GAEtBwD,QAAQC,IAAI,oB,IAGfC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,E,QAItB/B,EAAAgC,aAAoBjC,E,IAjGtBP,EAAc6D,iBAAiB,QAASzD,GACxCL,EAAQ8D,iBAAiB,QAASC,EAAAC,iBAElC3D,G","sources":["src/js/libRender.js","src/js/librender/filmsListMarkupTempl.js","src/js/genres.json","src/js/librender/renderFilmsMarkup.js"],"sourcesContent":["import { API_service } from './api/apiService';\nimport { getDatabase, ref, get } from 'firebase/database';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { firebaseConfig } from './api/firebase/firebaseConfig';\nimport renderFilmsMarkup from './librender/renderFilmsMarkup';\nimport dataStorage from './api/firebase/data-storage';\nimport { onOpenModalAuth } from './api/firebase/auth-settings';\nimport * as spiner from './features/auth/spiner';\nimport { renderPagination } from './pagination';\nimport { Loading } from 'notiflix';\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\n\nconst userData = {\n  queue: {},\n  watched: {},\n};\nnew dataStorage(userData);\nconst filmsApi = new API_service();\n\nconst authBtn = document.querySelector('#auth');\nconst watchedBtnRef = document.querySelector('.js-watched');\nconst queueBtnRef = document.querySelector('.js-queue');\nconst filmsList = document.querySelector('.library__container-list');\nconst emptyMessage = document.querySelector('.library__mes');\n\nqueueBtnRef.addEventListener('click', onQueueBtnClick);\nwatchedBtnRef.addEventListener('click', onWatchedBtnClick);\nauthBtn.addEventListener('click', onOpenModalAuth);\n\nonWatchedBtnClick();\n\nexport function onWatchedBtnClick() {\n  if (watchedBtnRef.classList.contains('current')) return;\n  let spinerSelector = spiner.spinerInit('body');\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/watched/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            const ids = Object.keys(snapshot.val());\n\n\n            //pagination\n            localStorage.setItem('fetchType', 'watched');\n            localStorage.setItem('totalPages', Math.ceil(ids.length / 20));\n            const totalPages = localStorage.getItem('totalPages');\n            renderPagination(totalPages);\n            //pagination\n\n            localStorage.setItem('watched', JSON.stringify(snapshot.val()));\n\n            if (!emptyMessage.classList.contains('visually-hidden')) {\n              emptyMessage.classList.add('visually-hidden');\n            }\n            // renderMarkupByIds(ids);\n            renderMarkupByIds(ids, localStorage.getItem('currentPage'));\n            //Render\n          } else {\n            if (emptyMessage.classList.contains('visually-hidden')) {\n              emptyMessage.classList.remove('visually-hidden');\n            }\n            filmsList.innerHTML = '';\n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n  spiner.removeSpiner(spinerSelector);\n  watchedBtnRef.classList.add('is-active');\n  queueBtnRef.classList.remove('is-active');\n}\n\nexport function onQueueBtnClick() {\n  if (queueBtnRef.classList.contains('is-active')) return;\n  queueBtnRef.classList.add('is-active');\n  watchedBtnRef.classList.remove('is-active');\n\n  let spinerSelector = spiner.spinerInit('body');\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/queue/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            const ids = Object.keys(snapshot.val());\n\n            //pagination\n            localStorage.setItem('fetchType', 'queue');\n            localStorage.setItem('totalPages', Math.ceil(ids.length / 20));\n            const totalPages = localStorage.getItem('totalPages');\n            renderPagination(totalPages);\n            //pagination\n\n            localStorage.setItem('queued', JSON.stringify(snapshot.val()));\n\n            if (!emptyMessage.classList.contains('visually-hidden')) {\n              emptyMessage.classList.add('visually-hidden');\n            }\n            renderMarkupByIds(ids);\n\n            //render\n          } else {\n            if (emptyMessage.classList.contains('visually-hidden')) {\n              emptyMessage.classList.remove('visually-hidden');\n            }\n            filmsList.innerHTML = '';\n\n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n  spiner.removeSpiner(spinerSelector);\n}\n\nexport default async function renderMarkupByIds(ids, page = 1) {\n  try {\n    let spinerSelector = spiner.spinerInit('body');\n\n    console.log('spinner on');\n\n    // Loading.pulse({\n    //   svgColor: 'orange',\n    // });\n\n    const startIndex = (page - 1) * 20;\n    const endIndex = page * 20;\n    const idsToRender = ids.slice(startIndex, endIndex);\n    const arrProm = idsToRender.map(async id => {\n      filmsApi.id = id;\n      return await filmsApi.fetchMovieById();\n    });\n    const films = await Promise.all(arrProm);\n    renderFilmsMarkup(films);\n    console.log('spinner off');\n    spiner.removeSpiner(spinerSelector);\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import genresData from '../genres.json';\n\nexport default function makeFilmsMarkup(films) {\n  return films\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        genres,\n        vote_average,\n        id,\n      }) => {\n        let filmGenres;\n        if (genres) {\n          filmGenres = genres.map(({ name }) => name).join(', ');\n        }\n        if (genre_ids) {\n          filmGenres = genresData\n            .filter(({ id }) => genre_ids.includes(id))\n            .map(({ name }) => name)\n            .join(', ');\n        }\n\n        return `<li class=\"films__item\" data-id=${id}>\n                \n                <img class=\"films__img\" src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${\n          title || name\n        }\" loading=\"lazy\">\n                  <div class=\"films__description\">\n                  <p class=\"films__title\">${title || name}</p>\n                  <p class=\"movie-card__additionaly\">${filmGenres || 'Action'}  |  ${(release_date || first_air_date || '2023').slice(\n                      0,\n                      4,\n                    )}</p>\n                    <span class=\"films__rating visually-hidden\">${vote_average || '-'}</span>\n                  </div>\n                </div>\n            </li>`;\n      },\n    )\n    .join('');\n}\n","[\n    {\n        \"id\": 28,\n        \"name\": \"Action\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Adventure\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Animation\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"Comedy\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"Crime\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"Documentary\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Drama\"\n    },\n    {\n        \"id\": 10751,\n        \"name\": \"Family\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Fantasy\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"History\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"Horror\"\n    },\n    {\n        \"id\": 10402,\n        \"name\": \"Music\"\n    },\n    {\n        \"id\": 9648,\n        \"name\": \"Mystery\"\n    },\n    {\n        \"id\": 10749,\n        \"name\": \"Romance\"\n    },\n    {\n        \"id\": 878,\n        \"name\": \"Science Fiction\"\n    },\n    {\n        \"id\": 10770,\n        \"name\": \"TV Movie\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Thriller\"\n    },\n    {\n        \"id\": 10752,\n        \"name\": \"War\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"Western\"\n    }\n]","import makeFilmsMarkup from './filmsListMarkupTempl';\n\nconst filmsListRef = document.querySelector('.library__container-list');\n\nexport default function renderFilmsMarkup(films) {\n  filmsListRef.innerHTML = makeFilmsMarkup(films);\n}\n"],"names":["$bpxeT","parcelRequire","$2d85b80279d1695f$export$2e2bcd8739ae039","films","map","param1","filmGenres","poster_path","title","name1","name","release_date","first_air_date","genre_ids","genres","vote_average","id1","id","param","join","$parcel$interopDefault","$0b1f61b1d1b5471b$exports","filter","includes","concat","slice","JSON","parse","$48d83e5e673ee673$var$filmsListRef","document","querySelector","$48d83e5e673ee673$export$2e2bcd8739ae039","innerHTML","$fcd177fd60824f37$var$app","$fkNhc","initializeApp","$1HnB8","firebaseConfig","$fcd177fd60824f37$var$db","$cokon","getDatabase","$fcd177fd60824f37$var$auth","$gQOBw","getAuth","$6QfM3","default","queue","watched","$fcd177fd60824f37$var$filmsApi","$1ubxI","API_service","$fcd177fd60824f37$var$authBtn","$fcd177fd60824f37$var$watchedBtnRef","$fcd177fd60824f37$var$queueBtnRef","$fcd177fd60824f37$var$filmsList","$fcd177fd60824f37$var$emptyMessage","$fcd177fd60824f37$export$852eb21c65e590aa","classList","contains","spinerSelector","$37FUf","spinerInit","onAuthStateChanged","user","libDataBase","uid","get","ref","then","snapshot","exists","ids","Object","keys","val","localStorage","setItem","Math","ceil","length","totalPages","getItem","$jcFG7","renderPagination","stringify","add","$fcd177fd60824f37$export$2e2bcd8739ae039","remove","console","log","catch","error","removeSpiner","$fcd177fd60824f37$var$_renderMarkupByIds","apply","this","arguments","$2TvXO","mark","_callee1","page","startIndex","endIndex","idsToRender","arrProm","_args","_callee","fetchMovieById","Promise","all","_ctx1","sent","t0","addEventListener","$8UO9k","onOpenModalAuth"],"version":3,"file":"library.aa04c746.js.map"}