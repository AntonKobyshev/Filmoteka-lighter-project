{"mappings":"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","sources":["src/js/libRender.js","src/js/templates/filmsListMarkupTempl.js","src/js/genres.json","src/js/templates/renderFilmsMarkup.js"],"sourcesContent":["import { API_service } from './api/apiService';\nimport { getDatabase, ref, get } from 'firebase/database';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { firebaseConfig } from './api/firebase/firebaseConfig';\nimport renderFilmsMarkup from './templates/renderFilmsMarkup';\nimport dataStorage from './api/firebase/data-storage';\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\n\nconst userData = {\n  queue: {},\n  watched: {},\n};\nnew dataStorage(userData);\nconst filmsApi = new API_service();\n\n\nconst watchedBtnRef = document.querySelector('.js-watched');\nconst queueBtnRef = document.querySelector('.js-queue');\nconst filmsList = document.querySelector('.library__container-list');\n\nqueueBtnRef.addEventListener('click', onQueueBtnClick);\nwatchedBtnRef.addEventListener('click', onWatchedBtnClick);\n\nfunction onWatchedBtnClick() {\n  if (watchedBtnRef.classList.contains('current')) return;\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/watched/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            \n            const ids = Object.keys(snapshot.val());\n              renderMarkupByIds(ids);\n           //Render\n          } else {\n            filmsList.innerHTML = '';\n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n\n  watchedBtnRef.classList.add('is-active');\n  queueBtnRef.classList.remove('is-active');\n}\n\nfunction onQueueBtnClick() {\n  if (queueBtnRef.classList.contains('is-active')) return;\n  queueBtnRef.classList.add('is-active');\n  watchedBtnRef.classList.remove('is-active');\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/queue/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n          \n              const ids = Object.keys(snapshot.val());\n              renderMarkupByIds(ids);\n           //render\n          } else {\n            filmsList.innerHTML = '';\n            addErrorStyles();\n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n}\n\nexport default async function renderMarkupByIds(ids) {\n  try {\n    const arrProm = ids.map(async id => {\n      filmsApi.id = id;\n      return await filmsApi.fetchMovieById();\n    });\n    const films = await Promise.all(arrProm);\n    renderFilmsMarkup(films);\n  } catch (error) {\n    console.log(error);\n  }\n}","import genresData from '../genres.json';\n\nexport default function makeFilmsMarkup(films) {\n  return films\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        genres,\n        vote_average,\n        id,\n      }) => {\n        let filmGenres;\n        if (genres) {\n          filmGenres = genres.map(({ name }) => name).join(', ');\n        }\n        if (genre_ids) {\n          filmGenres = genresData\n            .filter(({ id }) => genre_ids.includes(id))\n            .map(({ name }) => name)\n            .join(', ');\n        }\n\n        return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${\n          title || name\n        }\" loading=\"lazy\">\n        </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title || name}</p>\n                  <div class=\"films__meta\">\n                    <p class=\"films__genres\">${filmGenres || 'Action'}</p>\n                    <p class=\"films__data\">${(release_date || first_air_date || '2023').slice(\n                      0,\n                      4,\n                    )}</p>\n                    <span class=\"films__rating\">${vote_average || '-'}</span>\n                  </div>\n                </div>\n            </li>`;\n      },\n    )\n    .join('');\n}\n","[\n    {\n        \"id\": 28,\n        \"name\": \"Action\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Adventure\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Animation\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"Comedy\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"Crime\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"Documentary\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Drama\"\n    },\n    {\n        \"id\": 10751,\n        \"name\": \"Family\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Fantasy\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"History\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"Horror\"\n    },\n    {\n        \"id\": 10402,\n        \"name\": \"Music\"\n    },\n    {\n        \"id\": 9648,\n        \"name\": \"Mystery\"\n    },\n    {\n        \"id\": 10749,\n        \"name\": \"Romance\"\n    },\n    {\n        \"id\": 878,\n        \"name\": \"Science Fiction\"\n    },\n    {\n        \"id\": 10770,\n        \"name\": \"TV Movie\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Thriller\"\n    },\n    {\n        \"id\": 10752,\n        \"name\": \"War\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"Western\"\n    }\n]","import makeFilmsMarkup from './filmsListMarkupTempl';\n\nconst filmsListRef = document.querySelector('.library__container-list');\n\nexport default function renderFilmsMarkup(films) {\n  filmsListRef.innerHTML = makeFilmsMarkup(films);\n}\n"],"names":["$bpxeT","parcelRequire","$9aeecf77fc2153c4$export$2e2bcd8739ae039","films","map","param1","filmGenres","poster_path","title","name1","name","release_date","first_air_date","genre_ids","genres","vote_average","id1","id","param","join","$parcel$interopDefault","$0b1f61b1d1b5471b$exports","filter","includes","concat","slice","JSON","parse","$b72bcf50dad2dfa8$var$filmsListRef","document","querySelector","$b72bcf50dad2dfa8$export$2e2bcd8739ae039","innerHTML","$fcd177fd60824f37$var$app","$fkNhc","initializeApp","$1HnB8","firebaseConfig","$fcd177fd60824f37$var$db","$cokon","getDatabase","$fcd177fd60824f37$var$auth","$gQOBw","getAuth","$6QfM3","default","queue","watched","$fcd177fd60824f37$var$filmsApi","$1ubxI","API_service","$fcd177fd60824f37$var$watchedBtnRef","$fcd177fd60824f37$var$queueBtnRef","$fcd177fd60824f37$var$filmsList","ids","$fcd177fd60824f37$var$_renderMarkupByIds","apply","this","arguments","$2TvXO","mark","_callee1","arrProm","_callee","fetchMovieById","Promise","all","_ctx1","sent","console","log","t0","addEventListener","classList","contains","add","remove","onAuthStateChanged","user","libDataBase","uid","get","ref","then","snapshot","exists","$fcd177fd60824f37$export$2e2bcd8739ae039","Object","keys","val","addErrorStyles","catch","error"],"version":3,"file":"library.ef1d4075.js.map"}