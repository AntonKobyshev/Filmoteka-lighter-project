{"mappings":"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","sources":["src/js/libRender.js","src/js/librender/filmsListMarkupTempl.js","src/js/genres.json","src/js/librender/renderFilmsMarkup.js"],"sourcesContent":["import { API_service } from './api/apiService';\nimport { getDatabase, ref, get } from 'firebase/database';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { firebaseConfig } from './api/firebase/firebaseConfig';\nimport renderFilmsMarkup from './librender/renderFilmsMarkup';\nimport dataStorage from './api/firebase/data-storage';\nimport { onOpenModalAuth } from './api/firebase/auth-settings'\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\n\nconst userData = {\n  queue: {},\n  watched: {},\n};\nnew dataStorage(userData);\nconst filmsApi = new API_service();\n\nconst authBtn = document.querySelector('#auth');\nconst watchedBtnRef = document.querySelector('.js-watched');\nconst queueBtnRef = document.querySelector('.js-queue');\nconst filmsList = document.querySelector('.library__container-list');\nconst emptyMessage = document.querySelector('.library__mes');\n\nqueueBtnRef.addEventListener('click', onQueueBtnClick);\nwatchedBtnRef.addEventListener('click', onWatchedBtnClick);\nauthBtn.addEventListener('click', onOpenModalAuth);\n\n\n\nonWatchedBtnClick();\n\nfunction onWatchedBtnClick() {\n  if (watchedBtnRef.classList.contains('current')) return;\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/watched/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            \n              const ids = Object.keys(snapshot.val());\n              if (!emptyMessage.classList.contains('visually-hidden')) {\n                  emptyMessage.classList.add('visually-hidden');\n              }\n              renderMarkupByIds(ids);\n           //Render\n          } else {\n              if (emptyMessage.classList.contains('visually-hidden')) {\n                  emptyMessage.classList.remove('visually-hidden');\n              }\n            filmsList.innerHTML = '';\n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n\n  watchedBtnRef.classList.add('is-active');\n  queueBtnRef.classList.remove('is-active');\n}\n\nfunction onQueueBtnClick() {\n  if (queueBtnRef.classList.contains('is-active')) return;\n  queueBtnRef.classList.add('is-active');\n  watchedBtnRef.classList.remove('is-active');\n\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      const libDataBase = `users/${user.uid}/lib/queue/`;\n\n      get(ref(db, libDataBase))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n          \n              const ids = Object.keys(snapshot.val());\n              if (!emptyMessage.classList.contains('visually-hidden')) {\n                  emptyMessage.classList.add('visually-hidden');\n              }\n              renderMarkupByIds(ids);\n           //render\n          } else {\n            if (emptyMessage.classList.contains('visually-hidden')) {\n                  emptyMessage.classList.remove('visually-hidden');\n              }\n            filmsList.innerHTML = '';\n            \n            console.log('No data available');\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  });\n}\n\nexport default async function renderMarkupByIds(ids) {\n  try {\n    const arrProm = ids.map(async id => {\n      filmsApi.id = id;\n      return await filmsApi.fetchMovieById();\n    });\n    const films = await Promise.all(arrProm);\n    renderFilmsMarkup(films);\n  } catch (error) {\n    console.log(error);\n  }\n}","import genresData from '../genres.json';\n\nexport default function makeFilmsMarkup(films) {\n  return films\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        genres,\n        vote_average,\n        id,\n      }) => {\n        let filmGenres;\n        if (genres) {\n          filmGenres = genres.map(({ name }) => name).join(', ');\n        }\n        if (genre_ids) {\n          filmGenres = genresData\n            .filter(({ id }) => genre_ids.includes(id))\n            .map(({ name }) => name)\n            .join(', ');\n        }\n\n        return `<li class=\"films__item\" data-id=${id}>\n                <div class=\"films__img\">\n                <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${\n          title || name\n        }\" loading=\"lazy\">\n        </div>\n                <div class=\"films__description\">\n                  <p class=\"films__title\">${title || name}</p>\n                  <div class=\"films__meta\">\n                    <p class=\"films__genres\">${filmGenres || 'Action'}</p>\n                    <p class=\"films__data\">${(release_date || first_air_date || '2023').slice(\n                      0,\n                      4,\n                    )}</p>\n                    <span class=\"films__rating visually-hidden\">${vote_average || '-'}</span>\n                  </div>\n                </div>\n            </li>`;\n      },\n    )\n    .join('');\n}\n","[\n    {\n        \"id\": 28,\n        \"name\": \"Action\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Adventure\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Animation\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"Comedy\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"Crime\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"Documentary\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Drama\"\n    },\n    {\n        \"id\": 10751,\n        \"name\": \"Family\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Fantasy\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"History\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"Horror\"\n    },\n    {\n        \"id\": 10402,\n        \"name\": \"Music\"\n    },\n    {\n        \"id\": 9648,\n        \"name\": \"Mystery\"\n    },\n    {\n        \"id\": 10749,\n        \"name\": \"Romance\"\n    },\n    {\n        \"id\": 878,\n        \"name\": \"Science Fiction\"\n    },\n    {\n        \"id\": 10770,\n        \"name\": \"TV Movie\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Thriller\"\n    },\n    {\n        \"id\": 10752,\n        \"name\": \"War\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"Western\"\n    }\n]","import makeFilmsMarkup from './filmsListMarkupTempl';\n\nconst filmsListRef = document.querySelector('.library__container-list');\n\nexport default function renderFilmsMarkup(films) {\n  filmsListRef.innerHTML = makeFilmsMarkup(films);\n}\n"],"names":["$lOKsE","parcelRequire","$25b0e9eacea7af57$export$2e2bcd8739ae039","films","map","poster_path","title","name","name1","release_date","first_air_date","genre_ids","genres","vote_average","id","id1","filmGenres","join","$parcel$interopDefault","$1a18d98a372d8e28$exports","filter","includes","slice","JSON","parse","$74ad764641ad8f3b$var$filmsListRef","document","querySelector","$74ad764641ad8f3b$export$2e2bcd8739ae039","innerHTML","$54329e98fd9848c5$var$app","$gKkQl","initializeApp","$fEVjq","firebaseConfig","$54329e98fd9848c5$var$db","$jAzyG","getDatabase","$54329e98fd9848c5$var$auth","$eyjy7","getAuth","$2tZq5","default","queue","watched","$54329e98fd9848c5$var$filmsApi","API_service","$54329e98fd9848c5$var$authBtn","$54329e98fd9848c5$var$watchedBtnRef","$54329e98fd9848c5$var$queueBtnRef","$54329e98fd9848c5$var$filmsList","$54329e98fd9848c5$var$emptyMessage","$54329e98fd9848c5$var$onWatchedBtnClick","classList","contains","onAuthStateChanged","user","libDataBase","uid","get","ref","then","snapshot","exists","ids","Object","keys","val","add","$54329e98fd9848c5$export$2e2bcd8739ae039","remove","console","log","catch","error","async","arrProm","fetchMovieById","Promise","all","addEventListener","$e4m3s","onOpenModalAuth"],"version":3,"file":"library.1ced6c29.js.map"}